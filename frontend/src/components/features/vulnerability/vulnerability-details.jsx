"use client";

import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
} from "@/components/ui/form";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
} from "@/components/ui/command";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Separator } from "@/components/ui/separator";
import { ScrollArea } from "@/components/ui/scroll-area";

import { useData } from "@/providers/data-provider";
import { useForm } from "react-hook-form";
import { useEffect } from "react";
import { useToast } from "@/components/ui/use-toast";
import { ChevronsUpDown, Check } from "lucide-react";
import { cn } from "@/lib/utils";

export function VulnerabilityDetails({ vulnerabilityId }) {
  const { vulnerabilities, setVulnerabilities, settings, loadingSettings } =
    useData();
  const form = useForm();
  const { toast } = useToast();

  const vulnerability = vulnerabilities.filter(
    (vulnerability) => vulnerability._id == vulnerabilityId,
  )[0];
  const categories = settings.find(
    (setting) => setting.name === "categories",
  )?.value;

  async function onSubmit(values) {
    console.log(values);
    let postBody = values;

    const res = await fetch(`/api/vulnerabilities/${vulnerabilityId}`, {
      method: "POST",
      body: JSON.stringify(postBody),
    });

    const data = await res.json();
    setVulnerabilities([
      ...vulnerabilities.filter(
        (vulnerability) => vulnerability._id !== vulnerabilityId,
      ),
      data,
    ]);
    toast({
      description: `Vulnerability "${data.vulnerabilityIdentifier}" has been updated successfully.`,
    });
  }

  useEffect(() => {
    form.setValue("title", vulnerability?.title);
    form.setValue(
      "vulnerabilityIdentifier",
      vulnerability?.vulnerabilityIdentifier,
    );
    form.setValue("severity", vulnerability?.severity);
    form.setValue("category", vulnerability?.category);

    const down = (e) => {
      if (e.key === "s" && (e.metaKey || e.ctrlKey)) {
        e.preventDefault();
        form.handleSubmit(onSubmit)();
      }
    };

    document.addEventListener("keydown", down);
    return () => document.removeEventListener("keydown", down);
  }, [vulnerabilities]);

  return (
    <div className="space-y-6 h-full">
      <div className="flex flex-row justify-between items-center">
        <div>
          <h3 className="text-lg font-medium">Overview</h3>
          <p className="text-sm text-muted-foreground">
            Change details relating to an vulnerability using the form below.
          </p>
        </div>
        <div>
          <Button
            onClick={() => {
              form.handleSubmit(onSubmit)();
            }}
          >
            Save (ctrl+s)
          </Button>
        </div>
      </div>
      <Separator />
      <ScrollArea className="h-full">
        <Form {...form}>
          <form onSubmit={() => form.handleSubmit(onSubmit)}>
            <div className="grid gap-4">
              <div className="grid-cols-4 grid gap-4 w-full">
                <FormField
                  control={form.control}
                  name="vulnerabilityIdentifier"
                  render={({ field }) => (
                    <FormItem className="flex flex-col col-span-3">
                      <FormLabel>Vulnerability Identifier</FormLabel>
                      <FormControl>
                        <Input
                          placeholder="VULN-001"
                          value={field.value}
                          onChange={field.onChange}
                          autoComplete="off"
                        />
                      </FormControl>
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="severity"
                  render={({ field }) => (
                    <FormItem className="flex flex-col">
                      <FormLabel>Default Severity</FormLabel>
                      <Select
                        onValueChange={field.onChange}
                        value={field.value}
                        defaultValue={vulnerability?.severity}
                      >
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select a severity" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="critical">Critical</SelectItem>
                          <SelectItem value="high">High</SelectItem>
                          <SelectItem value="moderate">Moderate</SelectItem>
                          <SelectItem value="low">Low</SelectItem>
                          <SelectItem value="informational">
                            Informational
                          </SelectItem>
                        </SelectContent>
                      </Select>
                    </FormItem>
                  )}
                />
              </div>

              <FormField
                control={form.control}
                name="title"
                render={({ field }) => (
                  <FormItem className="flex flex-col">
                    <FormLabel>Title</FormLabel>
                    <FormControl>
                      <Input
                        placeholder="Remote Code Execution (RCE) via SQL Injection"
                        value={field.value}
                        onChange={field.onChange}
                        autoComplete="off"
                      />
                    </FormControl>
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="category"
                render={({ field }) => (
                  <FormItem className="flex flex-col">
                    <FormLabel>Category</FormLabel>
                    <Popover>
                      <PopoverTrigger asChild>
                        <FormControl>
                          <Button
                            variant="outline"
                            role="combobox"
                            className={cn(
                              "justify-between font-normal",
                              !field.value && "text-muted-foreground",
                            )}
                          >
                            {field.value
                              ? categories.find(
                                  (category) => category === field.value,
                                )
                              : "Select category"}
                            <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
                          </Button>
                        </FormControl>
                      </PopoverTrigger>
                      <PopoverContent className="w-[200px] p-0" align={"start"}>
                        <Command>
                          <CommandInput placeholder="Search categories..." />
                          <CommandEmpty>No categories found.</CommandEmpty>
                          <CommandGroup>
                            {categories?.map((category) => (
                              <CommandItem
                                value={category}
                                key={category}
                                onSelect={() => {
                                  form.setValue("category", category);
                                }}
                              >
                                <Check
                                  className={cn(
                                    "mr-2 h-4 w-4",
                                    category.toUpperCase() ===
                                      field.value?.toUpperCase()
                                      ? "opacity-100"
                                      : "opacity-0",
                                  )}
                                />
                                {category}
                              </CommandItem>
                            ))}
                          </CommandGroup>
                        </Command>
                      </PopoverContent>
                    </Popover>
                  </FormItem>
                )}
              />
            </div>
          </form>
        </Form>
      </ScrollArea>
    </div>
  );
}
